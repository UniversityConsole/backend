syntax = "proto3";

import "google/protobuf/wrappers.proto";

package identity_service;

service IdentityService {
    rpc CreateAccount(CreateAccountInput) returns (CreateAccountOutput);
    rpc DescribeAccount(DescribeAccountInput) returns (DescribeAccountOutput);
    rpc ListAccounts(ListAccountsInput) returns (ListAccountsOutput);
    rpc UpdatePermissions(UpdatePermissionsInput) returns (UpdatePermissionsOutput);
    rpc GetPermissions(GetPermissionsInput) returns (GetPermissionsOutput);
    rpc Authorize(AuthorizeInput) returns (AuthorizeOutput);
    rpc Authenticate(AuthenticateInput) returns (AuthenticateOutput);
    rpc GenerateAccessToken(GenerateAccessTokenInput) returns (GenerateAccessTokenOutput);
}


message CreateAccountInput {
    AccountAttributes account_attributes = 1;
}

message CreateAccountOutput {
    string account_id = 1;
}

/* Message used to describe a user account to be created. */
message AccountAttributes {
    string email = 1;
    string first_name = 2;
    string last_name = 3;
    string password = 4;
    bool discoverable = 5;
}


message DescribeAccountInput {
    string account_id = 1;
}

message DescribeAccountOutput {
    Account account = 1;
}


message ListAccountsInput {
    bool include_non_discoverable = 1;
    google.protobuf.StringValue starting_token = 2;
    uint32 page_size = 3;
}

message ListAccountsOutput {
    google.protobuf.StringValue next_token = 1;
    repeated Account accounts = 2;
}

message Account {
    string account_id = 1;
    string email = 2;
    string first_name = 3;
    string last_name = 4;
    bool discoverable = 5;
}


message UpdatePermissionsInput {
    string account_id = 1;
    PermissionsDocument permissions_document = 2;
}

message UpdatePermissionsOutput {}


message GetPermissionsInput {
    string account_id = 1;
}

message GetPermissionsOutput {
    PermissionsDocument permissions_document = 1;
}

message PermissionsDocument {
    repeated PolicyStatement statements = 1;
}

message AuthorizeInput {
    google.protobuf.StringValue account_id = 1;
    AccessRequest access_request = 2;
}

message AuthorizeOutput {
    bool permission_granted = 1;
}

message PolicyStatement {
    enum AccessKind {
        QUERY = 0;
        MUTATION = 1;
    }

    AccessKind access_kind = 1;
    repeated string paths = 3;
}

message AccessRequest {
    enum AccessKind {
        QUERY = 0;
        MUTATION = 1;
    }

    AccessKind access_kind = 1;
    repeated string paths = 3;
}

message AuthenticateInput {
    string email = 1;
    string password = 2;
}

message AuthenticateOutput {
    string access_token = 1;
    string refresh_token = 2;
}

message GenerateAccessTokenInput {
    string account_id = 1;
    string refresh_token = 2;
}

message GenerateAccessTokenOutput {
    string access_token = 1;
    string refresh_token = 2;
}